Total: 90/110

-5 interpreter; Input: ["call",["fun*",[["x",":",["int","cell"]]],[["x","=",1],"+",["x","!"]]],[0,"@"]]; Expected: 0
; Got: "run-time error: interpreter.value.ValueInt cannot be cast to interpreter.value.ValueCell"

-5 interpreter; Input: ["call",["fun*",[["fact!",":",[["int","->","int"],"cell"]]],["if-0",["call",["fact!","=",["fun*",[["z",":","int"]],["if-0","z",1,["z","*",["call",["fact!","!"],["z","+",-1]]]]]],0],["call",["fact!","!"],20],["call",["fact!","!"],20]]],["call","@",["fun*",[["x",":","int"]],"x"]]]; Expected: 2432902008176640000
; Got: -666

-5, for your test 0-in.json; got "type error: domain doesn't match"

-5, for your test 6-in.json; got parse-string: bad Var "iDontExist"
  context...:
   /usr/share/racket/collects/racket/match/compiler.rkt:507:40: f6
   /home/vagrant/src/20PL/Code/7/xinterpret:27:0: main

-5, for your test 9-in.json; got parse-string: bad Var "5"
  context...:
   /home/vagrant/src/20PL/Code/7/Other/data-rep.rkt:149:0: parse-typed-var
   /usr/share/racket/collects/racket/match/compiler.rkt:507:40: f175
   /usr/share/racket/collects/racket/private/map.rkt:54:19: loop
   /usr/share/racket/collects/racket/match/compiler.rkt:507:40: f175
   /home/vagrant/src/20PL/Code/7/xinterpret:27:0: main

-5, for your test 4-in.json; got parse-string: bad Var "funX"
  context...:
   /home/vagrant/src/20PL/Code/7/Other/data-rep.rkt:149:0: parse-typed-var
   /usr/share/racket/collects/racket/private/map.rkt:54:19: loop
   /usr/share/racket/collects/racket/match/compiler.rkt:507:40: f175
   /home/vagrant/src/20PL/Code/7/xinterpret:27:0: main

-5, for your test 1-in.json; got parse-string: bad Var "None"
  context...:
   /home/vagrant/src/20PL/Code/7/Other/data-rep.rkt:149:0: parse-typed-var
   /usr/share/racket/collects/racket/match/compiler.rkt:507:40: f175
   /usr/share/racket/collects/racket/match/compiler.rkt:418:15: parse-loop60
   /home/vagrant/src/20PL/Code/7/xinterpret:27:0: main

-5, for your test 3-in.json; got "cell"

+20 Bonus for your tests
===============
Code Inspection
===============
Inspection Scores Forthcoming

===============
Test Fest
===============
interpreter: Failed ["if-0", 0, [1, "@"], [["call", ["fun*", [["x", ":", "int"]], "x"], 5], "@"]], Expected "cell"
, Got ["cell",6]

interpreter: Failed [["let", ["f", ":", [["int", "cell"], "->", "int"]], "=", ["fun*", [["x", ":", ["int", "cell"]]], ["x", "!"]]],
  ["call", "f", [2, "@"]]], Expected 2
, Got ["cell",7]

interpreter: Failed [["let", ["swap", ":", [["int","cell"], ["int","cell"], "->", "int"]], "=",
  ["fun*", [["x", ":",["int", "cell"]], ["y", ":", ["int", "cell"]]],
    ["call", "=", "x", ["call", "=", "y", ["call", "!", "x"]]]
  ]],
  ["call", "swap", [30, "@"], [20, "@"]]
]

, Expected 30
, Got ["cell",7]

interpreter: Failed [
	["let", ["z", ":", [
			["int", "cell"], "->", "int"
		]], "=",
		["fun*", [
				["a", ":", ["int", "cell"]]
			],
			[1, "+", ["a", "!"]]
		]
	],
	["call", "z", [5, "@"]]
], Expected 6, Got "run-time error: interpreter.value.ValueCell cannot be cast to interpreter.value.ValueInt"

interpreter: Failed [
    ["let", ["fc", ":", ["->", ["int", "cell"]]], "=",
        ["fun*", [],
            [5, "@"]
        ]
    ],
    ["call", "fc"]
], Expected "cell", Got ["cell",7]

interpreter: Failed [5, "=", 2], Expected "type error: = ...", Got "type error: matching function and argument types expected"

interpreter: Failed "+", Expected "closure", Got "primop"

interpreter: Failed ["call", "@", 5], Expected "cell", Got ["cell",6]

interpreter: Failed ["call", ["fun*", [["x", ":", ["int", "cell"]]],
                  ["call", "^", ["call", "!", "x"], 2]],
         ["call", "@", 7]]
, Expected 49
, Got "run-time error: interpreter.value.ValueCell cannot be cast to interpreter.value.ValueInt"

interpreter: Failed [["fun*", [["x", ":", "int"]], "x"], "@"]
, Expected "cell"
, Got ["cell",6]

interpreter: Failed [["+", "@"], "!"]
, Expected "closure"
, Got "primop"

interpreter: Failed ["call", ["fun*", [], "@"]], Expected "type error: types not sufficiently instantiated", Got "primop"

interpreter: Failed [["let", ["f", ":", ["int", "->", ["int", "cell"]]], "=", 
  ["fun*", [["x", ":", "int"]], ["x", "@"]]],
  [3, "f"]
], Expected "cell", Got ["cell",8]

interpreter: Failed [[[2,"@"],"@"],"!"], Expected "cell", Got ["cell",6]

interpreter: Failed ["@","@"], Expected "type error: @ is polymorphic", Got ["cell",6]

interpreter: Failed "+"
, Expected "closure"
, Got "primop"

interpreter: Failed [1,"@"]
, Expected "cell"
, Got ["cell",6]

interpreter: Failed [1,"!"]
, Expected "type error: domain doesn't match"
, Got "type error: matching function and argument types expected"

interpreter: Failed [
                  ["let",["fact",":",[["int","cell"],"->","int"]],"=",
                  ["fun*",[["x",":",["int","cell"]]],
                  ["if-0", ["call","=","x",["call","+",["call","!","x"],-1]], 1,
                  ["call","*",["call","fact","x"],["call","+",1,["call","!","x"]]]
                  ]
                  ]],
                  ["call","fact",["call","@",5]]
                  ]
, Expected 120, Got "run-time error: interpreter.value.ValueCell cannot be cast to interpreter.value.ValueInt"

interpreter: Failed "="
, Expected "type error: types not sufficiently instantiated", Got "primop"

interpreter: Failed ["call","^",2,["call","*",-1,
[
                  ["let",["fact",":",[["int","cell"],"->","int"]],"=",
                  ["fun*",[["x",":",["int","cell"]]],
                  ["if-0", ["call","=","x",["call","+",["call","!","x"],-1]], 1,
                  ["call","*",["call","fact","x"],["call","+",1,["call","!","x"]]]
                  ]
                  ]],
                  ["call","fact",["call","@",5]]

]]

]
, Expected "run-time error: primop domain error", Got "run-time error: interpreter.value.ValueCell cannot be cast to interpreter.value.ValueInt"

interpreter: Failed [
	["let", ["x",":","int"], "=", 1],
	["let", ["y", ":", [[["int", "cell"], "cell"], "->", "int"]], "=",
	 ["fun*", [["x",":", [["int", "cell"], "cell"]]],
	  ["call", "!",
	   ["call", "!", "x"]]]],
	["call", "y", [[10, "@"], "@"]]]
, Expected 10
, Got "run-time error: null"

interpreter: Failed [
	["let", ["x",":","int"], "=", 1],
	["let", ["y", ":", [["int", "cell"], "->", "int"]], "=", ["fun*", [["x",":", ["int", "cell"]]], ["call", "!", "x"]]],
	["call", "y", [10, "@"]]]
, Expected 10
, Got ["cell",8]

interpreter: Failed [
	["let", ["seq",":",["int", ["int", "cell"], "->", ["int", "cell"]]], "=",
	 ["fun*", [["a", ":", "int"],["b",":", ["int", "cell"]]],
	  "b"]],
	["let", ["switch", ":", [["int", "cell"], ["int", "cell"], "->", ["int", "cell"]]], "=",
	 ["fun*", [["a",":", ["int", "cell"]], ["b", ":", ["int", "cell"]]],
	  ["call", "seq", ["call", "=", "a", ["call", "=", "b", ["call", "!", "a"]]], "a"]]],
	[[[10, "@"], "switch", [5, "@"]], "!"]]
, Expected 5
, Got ["cell",8]

interpreter: Failed [
	["let", ["z",":","int"], "=", 1],
	["let", ["y", ":", [["int", "cell"], "->", "int"]], "=",
	 ["fun*", [["x",":", ["int", "cell"]]],
	  ["call", "=", "x", 9]]],
	["call", "y", [10, "@"]]]
, Expected 10
, Got ["cell",8]

interpreter: Failed [
	["let", ["seq",":",["int", ["int", "cell"], "->", ["int", "cell"]]], "=",
	 ["fun*", [["a", ":", "int"],["b",":", ["int", "cell"]]],
	  "b"]],
	["let", ["switch", ":", [["int", "cell"], ["int", "cell"], "->", ["int", "cell"]]], "=",
	 ["fun*", [["a",":", ["int", "cell"]], ["b", ":", ["int", "cell"]]],
	  ["call", "seq", ["call", "=", "a", ["call", "=", "b", "a"]], "a"]]],
	[[[10, "@"], "switch", [5, "@"]], "!"]]
, Expected "type error: domain doesn't match"
, Got ["cell",8]

interpreter: Failed [
	["let", ["x",":","int"], "=", 1],
	["let", ["y", ":", [["int", "cell"], "->", "int"]], "=",
	 ["fun*", [["x",":", ["int", "cell"]]],
	  ["call", "!", "x"]]],
	["call", "y", [10, "@"]]]
, Expected 10
, Got ["cell",8]

interpreter: Failed ["call", "=", ["call", "@", 5], ["fun*", [], 0]]
, Expected "type error: domain doesn't match"
, Got 5

interpreter: Failed [["let", ["f", ":", [["int", "cell"], "->", ["int", "cell"]]], "=", ["fun*", [["x", ":", ["int", "cell"]]], "x"]],
  ["call", "f", ["call", "@", 100]]]
, Expected "cell"
, Got ["cell",7]

interpreter: Failed "+", Expected "closure", Got "primop"

interpreter: Failed ["call",["call","!",["call", "@", "@"]], 5], Expected "type error: @ is polymorphic", Got ["cell",7]

interpreter: Failed ["call","@","@"], Expected "type error: @ is polymorphic", Got ["cell",6]

interpreter: Failed [3, "!"], Expected "type error: domain doesn't match", Got "type error: matching function and argument types expected"

interpreter: Failed [3, "=", 4], Expected "type error: = ...", Got "type error: matching function and argument types expected"

interpreter: Failed ["call", "=", ["call", "@", 3], ["fun*", [], 3]], Expected "type error: domain doesn't match", Got 3

interpreter: Failed [1, "=", 2], Expected "type error: = ...", Got "type error: matching function and argument types expected"

interpreter: Failed [["let", ["double", ":", ["int", "->", "int"]], "=",
                                            ["fun*", [["c", ":", "int"]], ["c", "+", "c"]]],
                                           ["let", ["x", ":", [[["int", "->", "int"], "cell"], "int", "->", "int"]],
                                            "=",
                                            ["fun*", [["a", ":", [["int", "->", "int"], "cell"]], ["b", ":", "int"]],
                                             ["call", ["call", "=", "a", "double"], "b"]]],
                                           ["let", ["square", ":", ["int", "->", "int"]], "=",
                                            ["fun*", [["c", ":", "int"]], ["c", "*", "c"]]],
                                           ["call", "x", ["square", "@"], 10]], Expected 100, Got -666

interpreter: Failed "=", Expected "type error: types not sufficiently instantiated", Got "primop"

interpreter: Failed ["@", "@"], Expected "type error: @ is polymorphic", Got ["cell",6]

interpreter: Failed [
  "call", 
  [
    "fun*",
    [["x", ":", ["int", "cell"]], ["y", ":", ["int", "cell"]]],
    [
      "call", 
      ["fun*", [["x", ":", "int"], ["y", ":", "int"]], "x"], 
      ["x", "!"], 
      ["call", "=", "x", ["call", "=", "y", ["call", "!", "x"]]]
    ]
  ], 
  [0, "@"], 
  [1, "@"]
], Expected 1, Got ["cell",6]

interpreter: Failed [1, "@"], Expected "cell", Got ["cell",6]

interpreter: Failed [
  "call",
  [
    "fun*", 
    [["x", ":", ["int", "cell"]]],
    ["call", "+", ["x", "!"], ["x", "=", 1]]
  ],
  [0, "@"]
], Expected 1, Got "run-time error: interpreter.value.ValueCell cannot be cast to interpreter.value.ValueInt"

interpreter: Failed ["call", "@", 4]
, Expected "cell"
, Got ["cell",6]

interpreter: Failed [[[[[[[[[[42, "@"], "@"], "@"], "@"], "@"], "@"], "!"], "!"], "!"], "=", [[101, "@"], "@"]]
, Expected "cell"
, Got ["cell",7]

interpreter: Failed ["if-0", [[0, "@"], "!"], [1, "@"], [2, "@"]]
, Expected "cell"
, Got ["cell",7]

interpreter: Failed [[[[[[[[[[[42, "@"], "@"], "@"], "@"], "@"], "@"], "!"], "!"], "!"], "!"], "=", [[101, "@"], "@"]]
, Expected "type error: domain doesn't match"
, Got ["cell",6]

interpreter: Failed [["let", ["x", ":", [["int", "cell"], ["int", "cell"], "->", "int"]], "=",
                ["fun*", [["x", ":", ["int", "cell"]], ["y", ":", ["int", "cell"]]],  ["x", "=", ["y", "=", ["x", "!"]]]]],

              ["call", "x", [3, "@"], [9, "@"]]]
, Expected 3
, Got ["cell",7]

interpreter: Failed [4, "@"], Expected "cell", Got ["cell",6]

interpreter: Failed "="
, Expected "type error: types not sufficiently instantiated"
, Got "primop"

interpreter: Failed [["let", ["x", ":", [["int", "cell"], "->", "int"]], "=",
  ["fun*", [["x", ":", ["int", "cell"]]], ["call", "!", "x"]]],
 ["call", "@", ["call", "x", ["call", "@", 57]]]]
, Expected "cell"
, Got ["cell",8]

interpreter: Failed [5, "@"], Expected "cell", Got ["cell",6]

interpreter: Failed [
  ["let", ["f", ":", [["int", "cell"], "int", "->", "int"]], "=", ["fun*", [["a", ":", ["int", "cell"]], ["b", ":", "int"]], [["a", "!"], "+", "b"]]],
  ["call", "f", [4, "@"], 3]
], Expected 7, Got "run-time error: interpreter.value.ValueCell cannot be cast to interpreter.value.ValueInt"

interpreter: Failed "+", Expected "closure", Got "primop"
