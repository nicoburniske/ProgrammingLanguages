Total: 120/110

-5 interpreter; Input: [["let",["x",":","int"],"=",["call","z",0]],["let",["z",":",["int","->","int"]],"=",0],["let",["y",":","int"],"=",["call","+",1]],["call","+","x",2]]; Expected: "matching type declarations and types expected in Decl"
; Got: "variable z undeclared"

-5, for test 0-in.json; got parse: bad Int 500
  context...:
   /usr/share/racket/collects/racket/private/map.rkt:54:19: loop
   /usr/share/racket/collects/racket/match/compiler.rkt:507:40: f176
   /home/vagrant/src/20PL/Code/6/xcheck:25:0: main

+20 Bonus for your tests
===============
Code Inspection
===============
Inspection Scores Forthcoming

===============
Test Fest
===============
interpreter: Failed [["let", ["a", ":", "int"], "=", "b"],
 ["let", ["b", ":", "int"], "=", [3, "+", 2]], "a"]
, Expected {"expr": [["let", ["a", ":", "int"], "=", {"expr": "b", "type": "int"}], ["let", ["b", ":", "int"], "=", {"expr": ["call", {"expr": "+", "type": ["int", "int", "->", "int"]}, {"expr": 3, "type": "int"}, {"expr": 2, "type": "int"}], "type": "int"}], {"expr": "a", "type": "int"}], "type": "int"}
, Got "variable b undeclared"

interpreter: Failed [["let", ["x", ":", ["int", "int", "->", "int"]], "=", 
    ["fun*", [["a", ":", "int"], ["b", ":", "int"]], ["a", "+", ["b", "*", 5]]]],
     ["call", "x", 42, ["fun*", [["z", ":", "int"]], "z"]]], Expected "matching function and argument types expected"
, Got "variable * undeclared"

interpreter: Failed [["let", ["x", ":", ["int", "->", ["int", "->", "int"]]], "=", ["fun*", [["a", ":", "int"]], ["fun*", [["b", ":", "int"]], ["a", "+", "b"]]]],
 ["let", ["y", ":", ["int", "->", "int"]], "=", ["call", "x", 6]],
 ["let", ["z", ":", "int"], "=", ["call", "y", 15]],
 ["let", ["v", ":", "int"], "=", ["call", "y", 12]],
 ["let", ["t", ":", "int"], "=", ["v", "*", "x"]],
 ["if-0", "z", "y", "x"]], Expected "matching function and argument types expected"
, Got "variable * undeclared"

interpreter: Failed [
  ["let", ["rightleft",":",["int","int","->","int"]], "=",
    ["fun*", [["first",":","int"], ["second",":","int"]], ["first","*","second"]]
  ],
  ["call", "rightleft","rightleft",3]
], Expected "matching function and argument types expected"
, Got "variable * undeclared"

interpreter: Failed [
  ["let", ["rightleft",":",["int","int","->","int"]], "=",
    ["fun*", [["first",":","int"], ["second",":","int"]], ["first","*","second"]]
  ],
  ["let",["blah",":","int"],"=",33],
  ["let",["nofun",":","int"],"=","blah"],
  ["call", "nofun",4,3]
], Expected "function type expected"
, Got "variable * undeclared"

interpreter: Failed [
  ["let", ["rightleft",":",["int","int","->","int"]], "=",
    ["fun*", [["first",":","int"], ["second",":","int"]], ["first","*","second"]]
  ],
  ["let",["bleh",":","int"],"=",["fun*",[],13]],
  ["let",["blah",":","int"],"=",3],
  ["call", "rightleft","bleh","blah"]
], Expected "matching type declarations and types expected in Decl"
, Got "variable * undeclared"

interpreter: Failed [
  ["let", ["rightleft",":",["int","int","->","int"]], "=",
    ["fun*", [["first",":","int"], ["second",":","int"]], ["first","*","second"]]
  ],
  ["let",["blah",":","int"],"=",3],
  ["let",["nofun",":",["int","int","->","int"]],"=","blah"],
  ["call", "nofun",4,3]
], Expected "matching type declarations and types expected in Decl"
, Got "variable * undeclared"

interpreter: Failed [["let", ["!", ":", ["int", "->", "int"]], "=", 
  ["fun*", [["x", ":", "int"]], 
   ["if-0", "x", 
      1, 
      ["call", "*", "x", ["call", "!", ["call", "+", "x", -1]]]]]], 
 ["call", "!", 5]]
, Expected {
  "expr": [
    ["let", ["!", ":", ["int", "->", "int"]], "=", 
      {
        "expr": [
          "fun*", 
          [["x", ":", "int"]], 
          {
            "expr": [
              "if-0", 
                {
                  "expr": "x",
                  "type": "int"
                }, 
                {
                  "expr": 1,
                  "type": "int"
                }, 
                {
                  "expr": [
                    "call", 
                    {
                      "expr": "*",
                      "type": ["int", "int", "->", "int"]
                    },
                    {
                      "expr": "x",
                      "type": "int"
                    },
                    {
                      "expr": [
                        "call", 
                        {
                          "expr": "!",
                          "type": ["int", "->", "int"]
                        },
                        {
                          "expr": [
                            "call", 
                            {
                              "expr": "+",
                              "type": ["int", "int", "->", "int"]
                            },
                            {
                              "expr": "x",
                              "type": "int"
                            },
                            {
                              "expr": -1,
                              "type": "int"
                            }
                          ],
                          "type": "int"
                        }
                      ],
                      "type": "int"
                    }
                  ],
                  "type": "int"
                }
              ],
            "type": "int"
          }
        ],
        "type": ["int", "->", "int"]
    }], 
    {
      "expr": [
        "call", 
        {
          "expr": "!",
          "type": ["int", "->", "int"]
        },
        {
          "expr": 5,
          "type": "int"
        }
      ],
      "type": "int"
    }
   ],
  "type": "int"
}
, Got "variable * undeclared"

interpreter: Failed [
  [
    "let",
    ["fact", ":", ["int", "->", "int"]],
    "=",
    [
      "fun*",
      [["x", ":", "int"]],
      ["if-0", "x", 1, ["x", "*", ["call", "fact", ["x", "+", -1]]]]
    ]
  ],
  ["call", "fact", 4]
]
, Expected {
  "expr": [
    [
      "let",
      ["fact", ":", ["int", "->", "int"]],
      "=",
      {
        "expr": [
          "fun*",
          [["x", ":", "int"]],
          {
            "expr": [
              "if-0",
              {
                "expr": "x",
                "type": "int"
              },
              {
                "expr": 1,
                "type": "int"
              },
              {
                "expr": [
                  "call",
                  {
                    "expr": "*",
                    "type": ["int", "int", "->", "int"]
                  },
                  {
                    "expr": "x",
                    "type": "int"
                  },
                  {
                    "expr": [
                      "call",
                      {
                        "expr": "fact",
                        "type": ["int", "->", "int"]
                      },
                      {
                        "expr": [
                          "call",
                          {
                            "expr": "+",
                            "type": ["int", "int", "->", "int"]
                          },
                          {
                            "expr": "x",
                            "type": "int"
                          },
                          {
                            "expr": -1,
                            "type": "int"
                          }
                        ],
                        "type": "int"
                      }
                    ],
                    "type": "int"
                  }
                ],
                "type": "int"
              }
            ],
            "type": "int"
          }
        ],
        "type": ["int", "->", "int"]
      }
    ],
    {
      "expr": [
        "call",
        {
          "expr": "fact",
          "type": ["int", "->", "int"]
        },
        {
          "expr": 4,
          "type": "int"
        }
      ],
      "type": "int"
    }
  ],
  "type": "int"
}
, Got "variable * undeclared"

interpreter: Failed [
  [
    "let",
    ["f", ":", ["int", "->", "int"]],
    "=",
    ["fun*", [["x", ":", "int"]], ["x", "+", "y"]]
  ],
  ["let", ["y", ":", "int"], "=", 1],
  ["call", "f", "y"]
]
, Expected {
  "expr": [
    [
      "let",
      ["f", ":", ["int", "->", "int"]],
      "=",
      {
        "expr": [
          "fun*",
          [["x", ":", "int"]],
          {
            "expr": [
              "call",
              { "expr": "+", "type": ["int", "int", "->", "int"] },
              { "expr": "x", "type": "int" },
              { "expr": "y", "type": "int" }
            ],
            "type": "int"
          }
        ],
        "type": ["int", "->", "int"]
      }
    ],
    ["let", ["y", ":", "int"], "=", { "expr": 1, "type": "int" }],
    {
      "expr": [
        "call",
        { "expr": "f", "type": ["int", "->", "int"] },
        { "expr": "y", "type": "int" }
      ],
      "type": "int"
    }
  ],
  "type": "int"
}
, Got "variable y undeclared"

interpreter: Failed [["let", ["recursive", ":", ["int", "int", "->", "int"]], "=", 
    ["fun*", [["count", ":", "int"], ["acc", ":", "int"]], 
        ["if-0", 
            "count", 
            "acc", 
            ["call", "recursive", ["count", "+", -1], ["acc", "*", 2]]
        ]
    ]
 ],
 ["call", "recursive", 3, 1]]
, Expected {"expr" : 
    [["let", ["recursive", ":", ["int", "int", "->", "int"]], "=", 
        {"expr" : ["fun*", [["count", ":", "int"], ["acc", ":", "int"]], 
            {"expr" : 
                ["if-0", 
                    {"expr" : "count", 
                    "type" : "int"}, 
                    {"expr" : "acc", 
                    "type" : "int"},
                    {"expr" : ["call", 
                        {"expr" : "recursive", 
                        "type" : ["int", "int", "->", "int"]}, 
                        {"expr" : ["call",
                            {"expr" : "+", "type" : ["int", "int", "->", "int"]}, 
                            {"expr" : "count", "type" : "int"},
                            {"expr" : -1, "type" : "int"}], 
                        "type" : "int"}, 
                        {"expr" : ["call",
                            {"expr" : "*", "type" : ["int", "int", "->", "int"]},
                            {"expr" : "acc", "type" : "int"},
                            {"expr" : 2, "type" : "int"}], 
                        "type" : "int"}], 
                    "type" : "int"}
                ], 
            "type" : "int"}
        ], "type" : ["int", "int", "->", "int"]}
     ],
    {"expr" : ["call", 
                {"expr" : "recursive", "type" : ["int", "int", "->", "int"]}, 
                {"expr" : 3, "type" : "int"}, 
                {"expr" : 1, "type" : "int"}], 
    "type" : "int"}], 
"type" : "int"}
, Got "variable * undeclared"

interpreter: Failed [["let", ["x", ":", ["int", "->", "int"]], "=", 
         ["fun*", [["v", ":", "int"]], ["v", "*", 3]]],
["let", ["f", ":", [["int", "->", "int"], "->", ["int", "->", "int"]]], "=", 
        ["fun*", [["y", ":", ["int", "->", "int"]]], "y"]],
["call", "f", "x"]]
, Expected {"expr" :
[["let", ["x", ":", ["int", "->", "int"]], "=", 
         {"expr" : ["fun*", [["v", ":", "int"]], 
                {"expr" : ["call",
                    {"expr" : "*", "type" : ["int", "int", "->", "int"]},
                    {"expr" : "v", "type" : "int"},
                    {"expr" : 3, "type" : "int"}],
                "type" : "int"}],
        "type" : ["int", "->", "int"]}],

["let", ["f", ":", [["int", "->", "int"], "->", ["int", "->", "int"]]], "=", 
        {"expr" : ["fun*", [["y", ":", ["int", "->", "int"]]], 
            {"expr" : "y", "type" : ["int", "->", "int"]}],
        "type" : [["int", "->", "int"], "->", ["int", "->", "int"]]}],

{"expr" : ["call", 
            {"expr" : "f", "type" : [["int", "->", "int"], "->", ["int", "->", "int"]]}, 
            {"expr" : "x", "type" : ["int", "->", "int"]}],
"type" : ["int", "->", "int"]}], 
"type" : ["int", "->", "int"]}
, Got "variable * undeclared"

interpreter: Failed [["let", ["y", ":", ["int", "->", "int"]], "=", ["fun*", [["num", ":", "int"]], 
  ["if-0", "num", "num", ["num", "+", ["call", "x", ["num", "+", -1]]]]]],
["let", ["x", ":", ["int", "->", "int"]], "=", ["fun*", [["num", ":", "int"]],
  ["if-0", "num", "num", ["num", "+", [-1, "*", ["call", "y", ["num", "+", -1]]]]]]],
["call", "x", 5]], Expected {
  "type": "int",
  "expr": 
  [["let", ["y", ":", ["int", "->", "int"]], "=", {
    "type": ["int", "->", "int"],
    "expr": ["fun*", [["num", ":", "int"]], {
      "type": "int",
      "expr": ["if-0", {
        "type": "int",
        "expr": "num"
       }, {
        "type": "int",
        "expr": "num"
       }, {
         "type": "int",
         "expr": ["call", { "type": ["int", "int", "->", "int"], "expr": "+" }, {"type": "int", "expr": "num"}, {
           "type": "int",
           "expr": ["call", {"type":["int", "->", "int"],"expr":"x"}, {
             "type": "int",
             "expr": ["call", { "type": ["int", "int", "->", "int"], "expr": "+" }, {"type":"int","expr":"num"}, {"type":"int","expr":-1}]
           }
          ]
        }]
      }]
    }]
  }],
  ["let", ["x", ":", ["int", "->", "int"]], "=", {
    "type": ["int", "->", "int"],
    "expr": ["fun*", [["num", ":", "int"]], {
      "type": "int",
      "expr": ["if-0", {
        "type": "int",
        "expr": "num"
      }, {
        "type": "int",
        "expr": "num"
      }, {
        "type": "int",
        "expr": ["call", { "type": ["int", "int", "->", "int"], "expr": "+" }, {"type": "int", "expr": "num"}, {
          "type": "int",
          "expr": ["call", { "type": ["int", "int", "->", "int"], "expr": "*" }, {"type": "int", "expr": -1}, {
            "type":"int", 
            "expr": ["call", {"type": ["int", "->", "int"],"expr":"y"}, {
              "type": "int",
              "expr": ["call", { "type": ["int", "int", "->", "int"], "expr": "+" }, {"type":"int","expr":"num"}, {"type":"int","expr":-1}]
            }]
          }]
        }]
      }]
    }]
  }],
  {
    "type": "int",
    "expr": ["call", {"type":["int", "->", "int"],"expr":"x"}, {"type":"int","expr":5}]
  }]
}
, Got "variable x undeclared"

interpreter: Failed [["let",["x",":","int"],"=","y"],["let",["z",":",["int","int","->","int"]],"=","^"],["let",["y",":",["int","int","->","int"]],"=","z"],2], Expected "matching type declarations and types expected in Decl", Got "variable y undeclared"

interpreter: Failed ["call",[["let",["x",":","int"],"=","y"],["let",["y",":","int"],"=",2],["fun*",[["a",":","int"]],["x","+",["y","+","a"]]]],35]
, Expected {"type":"int","expr":["call",{"type":["int","->","int"],"expr":[["let",["x",":","int"],"=",{"type":"int","expr":"y"}],["let",["y",":","int"],"=",{"type":"int","expr":2}],{"type":["int","->","int"],"expr":["fun*",[["a",":","int"]],{"type":"int","expr":["call",{"type":["int","int","->","int"],"expr":"+"},{"type":"int","expr":"x"},{"type":"int","expr":["call",{"type":["int","int","->","int"],"expr":"+"},{"type":"int","expr":"y"},{"type":"int","expr":"a"}]}]}]}]},{"type":"int","expr":35}]}, Got "variable y undeclared"

interpreter: Failed [
	["let", ["var",":",["int","->","int"]],"=",
[
	["let",["getFact",":",["->",["int","->","int"]]],"=",
		["fun*",[],"fact"]
	],
	["let",["fact",":",["int","->","int"]],"=",
		["fun*",[["x",":","int"]],
			["if-0","x",1,
				["call","*","x",["call","fact",["call","+","x",-1]]]
			]
		]
	],
	["call", "getFact"]
]
	],
	["let",["err",":","int"],"=",
		["if-0",["call","var","var",3],22,"var"]
	],
	"undeclared"
]
, Expected "number of arguments does not match number of parameters", Got "variable fact undeclared"

interpreter: Failed [
	["let",["getFact",":",["->",["int","->","int"]]],"=",
		["fun*",[],"fact"]
	],
	["let",["fact",":",["int","->","int"]],"=",
		["fun*",[["x",":","int"]],
			["if-0","x",1,
				["call","*","x",["call","fact",["call","+","x",-1]]]
			]
		]
	],
	["call", "getFact"]
]
, Expected {"expr":[["let",["getFact",":",["->",["int","->","int"]]],"=",{"expr":["fun*",[],{"expr":"fact","type":["int","->","int"]}],"type":["->",["int","->","int"]]}],["let",["fact",":",["int","->","int"]],"=",{"expr":["fun*",[["x",":","int"]],{"expr":["if-0",{"expr":"x","type":"int"},{"expr":1,"type":"int"},{"expr":["call",{"expr":"*","type":["int","int","->","int"]},{"expr":"x","type":"int"},{"expr":["call",{"expr":"fact","type":["int","->","int"]},{"expr":["call",{"expr":"+","type":["int","int","->","int"]},{"expr":"x","type":"int"},{"expr":-1,"type":"int"}],"type":"int"}],"type":"int"}],"type":"int"}],"type":"int"}],"type":["int","->","int"]}],{"expr":["call",{"expr":"getFact","type":["->",["int","->","int"]]}],"type":["int","->","int"]}],"type":["int","->","int"]}, Got "variable fact undeclared"

interpreter: Failed [
	["let", ["var",":",["int","->","int"]],"=",
[
	["let",["getFact",":",["->",["int","->","int"]]],"=",
		["fun*",[],"fact"]
	],
	["let",["fact",":",["int","->","int"]],"=",
		["fun*",[["x",":","int"]],
			["if-0","x",1,
				["call","*","x",["call","fact",["call","+","x",-1]]]
			]
		]
	],
	["call", "getFact"]
]
	],
	"undeclared"
]
, Expected "variable undeclared undeclared", Got "variable fact undeclared"

interpreter: Failed [
	["let", ["var",":",["int","->","int"]],"=",
[
	["let",["getFact",":",["->",["int","->","int"]]],"=",
		["fun*",[],"fact"]
	],
	["let",["fact",":",["int","->","int"]],"=",
		["fun*",[["x",":","int"]],
			["if-0","x",1,
				["call","*","x",["call","fact",["call","+","x",-1]]]
			]
		]
	],
	["call", "getFact"]
]
	],
	["let",["err",":","int"],"=",
		["if-0",["call","var","var"],22,"var"]
	],
	"undeclared"
]
, Expected "matching function and argument types expected", Got "variable fact undeclared"

interpreter: Failed [
	["let", ["var",":",["int","->","int"]],"=",
[
	["let",["getFact",":",["->",["int","->","int"]]],"=",
		["fun*",[],"fact"]
	],
	["let",["fact",":",["int","->","int"]],"=",
		["fun*",[["x",":","int"]],
			["if-0","x",1,
				["call","*","x",["call","fact",["call","+","x",-1]]]
			]
		]
	],
	["call", "getFact"]
]
	],
	["let",["err",":",["int","->",["->",["->","int"]]]],"=",
		["if-0",["call","var",3],22,-1]
	],
	"undeclared"
]
, Expected "matching type declarations and types expected in Decl", Got "variable fact undeclared"

interpreter: Failed [
	["let", ["var",":",["int","->","int"]],"=",
[
	["let",["getFact",":",["->",["int","->","int"]]],"=",
		["fun*",[],"fact"]
	],
	["let",["fact",":",["int","->","int"]],"=",
		["fun*",[["x",":","int"]],
			["if-0","x",1,
				["call","*","x",["call","fact",["call","+","x",-1]]]
			]
		]
	],
	["call", "getFact"]
]
	],
	["let",["err",":","int"],"=",
		["if-0",["call",3,3,3],22,"var"]
	],
	"undeclared"
]
, Expected "function type expected", Got "variable fact undeclared"

interpreter: Failed [
	["let", ["collatz",":",["int","->","int"]], "=", 
		["fun*", [["n",":","int"]],
			["if-0", ["n","+", -1],
				"n",
				["call", "collatz", [["n", "+", -1], "*", 1]]
			]
		]],			
	["call", "collatz",1]]
, Expected {"expr":[["let",["collatz",":",["int","->","int"]],"=",{"expr":["fun*",[["n",":","int"]],{"expr":["if-0",{"expr":["call",{"expr":"+","type":["int","int","->","int"]},{"expr":"n","type":"int"},{"expr":-1,"type":"int"}],"type":"int"},{"expr":"n","type":"int"},{"expr":["call",{"expr":"collatz","type":["int","->","int"]},{"expr":["call",{"expr":"*","type":["int","int","->","int"]},{"expr":["call",{"expr":"+","type":["int","int","->","int"]},{"expr":"n","type":"int"},{"expr":-1,"type":"int"}],"type":"int"},{"expr":1,"type":"int"}],"type":"int"}],"type":"int"}],"type":"int"}],"type":["int","->","int"]}],{"expr":["call",{"expr":"collatz","type":["int","->","int"]},{"expr":1,"type":"int"}],"type":"int"}],"type":"int"}
, Got "variable * undeclared"

interpreter: Failed ["call",[
	["let", ["x",":","int"], "=", 3],
	["let",["func",":",["int","->","int"]],"=",["fun*", [["unused",":","int"]], ["x", "+", "y"]]],
	["let", ["y",":","int"], "=", 6],
	["func"]
],
3]
, Expected {"expr":["call",{"expr":[["let",["x",":","int"],"=",{"expr":3,"type":"int"}],["let",["func",":",["int","->","int"]],"=",{"expr":["fun*",[["unused",":","int"]],{"expr":["call",{"expr":"+","type":["int","int","->","int"]},{"expr":"x","type":"int"},{"expr":"y","type":"int"}],"type":"int"}],"type":["int","->","int"]}],["let",["y",":","int"],"=",{"expr":6,"type":"int"}],{"expr":[{"expr":"func","type":["int","->","int"]}],"type":["int","->","int"]}],"type":["int","->","int"]},{"expr":3,"type":"int"}],"type":"int"}
, Got "variable y undeclared"

interpreter: Failed [
	["let",["x",":","int"],"=",3],
	["let",["y",":","int"],"=",["z","*",-2]],
	["let",["z",":","int"],"=",["y", "*", "hi_leif"]],
	["x","+","y"]
]
, Expected "variable hi_leif undeclared"
, Got "variable * undeclared"

interpreter: Failed ["if-0", [20, "*", 0],
	[20,"^",[20,"*",[10,"+",230]]], "y"]
, Expected "variable y undeclared"
, Got "variable * undeclared"

interpreter: Failed ["call", ["fun*", [["a", ":", "int"],["b", ":", "int"], ["c", ":", "int"], ["d", ":", "int"]],
  ["call", "^",["call", "*", "a", "b"], ["call", "+", "c", "d"]]], ["if-0", 0, "*", "+"], 2], Expected "number of arguments does not match number of parameters", Got "variable * undeclared"

interpreter: Failed [["let", ["a", ":",  ["->", [["int", "->", "int"], "->", ["->", ["int", "->", "int"]]]]], "=",
  [["let", ["y", ":", ["->", [["int", "->", "int"], "->", ["->", ["int", "->", "int"]]]]], "=", ["fun*", [],"x"]],
    ["let", ["x", ":", [["int", "->", "int"], "->", ["->", ["int", "->", "int"]]]], "=",
                                ["fun*", [["l", ":", ["int", "->", "int"]]],
                                ["fun*", [], "l"]]], ["y"]]],
  ["call",["call", "a"], ["fun*", [["l", ":", "int"]], ["call", "+", 1, "l"]]]], Expected {"expr": [["let", ["a", ":", ["->", [["int", "->", "int"], "->", ["->", ["int", "->", "int"]]]]], "=", {"expr": [["let", ["y", ":", ["->", [["int", "->", "int"], "->", ["->", ["int", "->", "int"]]]]], "=", {"expr": ["fun*", [], {"expr": "x", "type": [["int", "->", "int"], "->", ["->", ["int", "->", "int"]]]}], "type": ["->", [["int", "->", "int"], "->", ["->", ["int", "->", "int"]]]]}], ["let", ["x", ":", [["int", "->", "int"], "->", ["->", ["int", "->", "int"]]]], "=", {"expr": ["fun*", [["l", ":", ["int", "->", "int"]]], {"expr": ["fun*", [], {"expr": "l", "type": ["int", "->", "int"]}], "type": ["->", ["int", "->", "int"]]}], "type": [["int", "->", "int"],  "->", ["->", ["int", "->", "int"]]]}], {"expr": [{"expr": "y", "type": ["->", [["int", "->", "int"], "->", ["->", ["int", "->", "int"]]]]}], "type": ["->", [["int", "->", "int"], "->", ["->", ["int", "->", "int"]]]]}], "type": ["->", [["int", "->", "int"], "->", ["->", ["int", "->", "int"]]]]}], {"expr": ["call", {"expr": ["call", {"expr": "a",  "type": ["->", [["int", "->", "int"], "->", ["->", ["int", "->", "int"]]]]}], "type": [["int", "->", "int"], "->", ["->", ["int", "->", "int"]]]}, {"expr": ["fun*", [["l", ":", "int"]], {"expr": ["call", {"expr": "+", "type": ["int", "int", "->", "int"]}, {"expr": 1, "type": "int"}, {"expr": "l", "type": "int"}], "type": "int"}],  "type": ["int", "->", "int"]}], "type": ["->", ["int", "->", "int"]]}], "type": ["->", ["int", "->", "int"]]}, Got "variable x undeclared"

interpreter: Failed ["call", ["fun*", [["a", ":", "int"],["b", ":", "int"], ["c", ":", "int"], ["d", ":", "int"]],
  ["call", "^",["call", "*", "a", "b"], ["call", "+", "c", "d"]]], ["if-0", 0, "*", "+"], 2, 3, 4], Expected "matching function and argument types expected", Got "variable * undeclared"

interpreter: Failed [["let", ["x", ":", "int"], "=", ["y", "+", 1]], ["let", ["y", ":", "int"], "=", 20], "y"], Expected {"expr": [["let", ["x", ":", "int"], "=", {"expr": ["call", {"expr": "+", "type": ["int", "int", "->", "int"]}, {"expr": "y", "type": "int"}, {"expr": 1, "type": "int"}], "type": "int"}], ["let", ["y", ":", "int"], "=", {"expr": 20, "type": "int"}], {"expr": "y", "type": "int"}], "type": "int"}, Got "variable y undeclared"

interpreter: Failed [["let", ["factorial", ":", ["int", "->", "int"]], "=", ["fun*", [["x", ":", "int"]], ["if-0", "x", 1,
  ["x", "*", ["call", "factorial", ["x", "+", -1]]]]]],
  ["call", "factorial", 3]], Expected {"expr": [["let", ["factorial", ":", ["int", "->", "int"]], "=", {"expr": ["fun*", [["x", ":", "int"]], {"expr": ["if-0", {"expr": "x", "type": "int"}, {"expr": 1, "type": "int"}, {"expr": ["call", {"expr": "*", "type": ["int", "int", "->", "int"]}, {"expr": "x", "type": "int"}, {"expr": ["call", {"expr": "factorial", "type": ["int", "->", "int"]}, {"expr": ["call", {"expr": "+", "type": ["int", "int", "->", "int"]}, {"expr": "x", "type": "int"}, {"expr": -1, "type": "int"}], "type": "int"}], "type": "int"}], "type": "int"}], "type": "int"}], "type": ["int", "->", "int"]}], {"expr": ["call", {"expr": "factorial", "type": ["int", "->", "int"]}, {"expr": 3, "type": "int"}], "type": "int"}], "type": "int"}, Got "variable * undeclared"

interpreter: Failed [
  ["let", ["fact", ":", ["int", "->", "int"]], "=", 
    ["fun*", 
      [["x", ":", "int"]], 
      ["if-0", 
        "x", 
        1, 
        ["x", "*", ["call", "fact", ["x", "+", -1]]]]]],
        
  ["call", "fact", 256]
], Expected {
  "type": "int",
  "expr": [
    ["let", ["fact", ":", ["int", "->", "int"]], "=", 
      {
        "type": ["int", "->", "int"],
        "expr": ["fun*", 
          [["x", ":", "int"]], 
          {
            "type": "int",
            "expr": ["if-0", 
              { "expr": "x", "type": "int" },
              {
                "type": "int",
                "expr": 1
              }, 
              {
                "type": "int",
                "expr": ["call", {
                  "expr": "*",
                  "type": ["int", "int", "->", "int"]
                }, {
                  "expr": "x",
                  "type": "int"
                }, {
                  "type": "int",
                  "expr": ["call", {
                    "expr": "fact",
                    "type": ["int", "->", "int"]
                  }, {
                    "type": "int",
                    "expr": ["call", {
                      "expr": "+",
                      "type": ["int", "int", "->", "int"]
                    }, {
                      "expr": "x",
                      "type": "int"
                    }, {
                      "type": "int",
                      "expr": -1
                    }]
                  }]
                }]
              }]
          }]
      }],
    {
      "type": "int",
      "expr": ["call", {
        "expr": "fact",
        "type": ["int", "->", "int"]
      }, {
        "type": "int",
        "expr": 256
      }]
    }
  ]
}, Got "variable * undeclared"

interpreter: Failed [
  "if-0",
  [0, "+", [1, "*", [256, "^", -256]]],
  1,
  "+"
], Expected "same type expected for if branches", Got "variable * undeclared"

interpreter: Failed [
  ["let", ["x", ":", "int"], "=", "y"],
  ["let", ["y", ":", "int"], "=", "x"],
  "x"
], Expected { 
  "expr": [
    ["let", ["x", ":", "int"], "=", {"expr": "y", "type": "int"}], 
    ["let", ["y", ":", "int"], "=", {"expr": "x", "type": "int"}], 
    {"expr": "x", "type": "int"}
  ], 
  "type": "int"
}, Got "variable y undeclared"

interpreter: Failed [
  ["let", ["x", ":", "int"], "=", ["call", "y", "x"]],
  ["let", ["y", ":", ["int", "->", "int"]], "=", ["fun*", [["x", ":", "int"]], "x"]],
  ["let", ["z", ":", "int"], "=", "z"],
  ["call", "y", "x"]
], Expected {"expr": [
  ["let", ["x", ":", "int"], "=", 
    {"expr": ["call", {"expr": "y", "type": ["int", "->", "int"]}, 
    {"expr": "x", "type": "int"}], "type": "int"}], 
  ["let", ["y", ":", ["int", "->", "int"]], "=", 
    {"expr": ["fun*", [["x", ":", "int"]], {"expr": "x", "type": "int"}], "type": ["int", "->", "int"]}], 
  ["let", ["z", ":", "int"], "=", {"expr": "z", "type": "int"}], 
  {"expr": ["call", {"expr": "y", "type": ["int", "->", "int"]}, {"expr": "x", "type": "int"}], "type": "int"}], "type": "int"}, Got "variable y undeclared"

interpreter: Failed [
  ["let", ["add2", ":", ["int", "->", "int"]], "=", ["fun*", [["x", ":", "int"]], [1, "+", ["call", "add1", "x"]]]],
  ["let", ["add1", ":", ["int", "->", "int"]], "=", ["fun*", [["x", ":", "int"]], [1, "+", "x"]]],
  ["let", ["add3", ":", ["int", "->", "int"]], "=", ["fun*", [["x", ":", "int"]], ["call", "add2", ["call", "add1", "x"]]]],
  ["call", "add3", ["call", "add1", ["call", "add2", 0]]]
], Expected {
  "expr": [
    ["let", ["add2", ":", ["int", "->", "int"]], "=", {
      "expr": ["fun*", [["x", ":", "int"]], {
        "expr": [
          "call", 
          {"expr": "+", "type": ["int", "int", "->", "int"]}, 
          {"expr": 1, "type": "int"}, {
            "expr": ["call", {"expr": "add1", "type": ["int", "->", "int"]}, {"expr": "x", "type": "int"}], 
            "type": "int"
          }], 
        "type": "int"}], 
      "type": ["int", "->", "int"]}], 
    ["let", ["add1", ":", ["int", "->", "int"]], "=", 
      {"expr": ["fun*", [["x", ":", "int"]], {"expr": 
        ["call", {"expr": "+", "type": ["int", "int", "->", "int"]}, 
        {"expr": 1, "type": "int"}, {"expr": "x", "type": "int"}], "type": "int"}], "type": ["int", "->", "int"]}], 
    ["let", ["add3", ":", ["int", "->", "int"]], "=", 
      {"expr": ["fun*", [["x", ":", "int"]], {"expr": 
        ["call", {"expr": "add2", "type": ["int", "->", "int"]}, 
        {"expr": ["call", {"expr": "add1", "type": ["int", "->", "int"]}, 
        {"expr": "x", "type": "int"}], "type": "int"}], "type": "int"}], "type": ["int", "->", "int"]}], 
        {"expr": ["call", {"expr": "add3", "type": ["int", "->", "int"]}, 
        {"expr": ["call", {"expr": "add1", "type": ["int", "->", "int"]}, 
        {"expr": ["call", {"expr": "add2", "type": ["int", "->", "int"]}, 
        {"expr": 0, "type": "int"}], "type": "int"}], "type": "int"}], "type": "int"}], "type": "int"}, Got "variable add1 undeclared"

interpreter: Failed [["let", ["x", ":", ["int", "int", "->", "int"]], "=", "*"], [3, "x", 4]], Expected {"expr": [["let", ["x", ":", ["int", "int", "->", "int"]], "=", {"expr": "*", "type": ["int", "int", "->", "int"]}], {"expr": ["call", {"expr": "x", "type": ["int", "int", "->", "int"]}, {"expr": 3, "type": "int"}, {"expr": 4, "type": "int"}], "type": "int"}], "type": "int"}
, Got "variable * undeclared"

interpreter: Failed [["let", ["x", ":", "int"], "=", "x"], "x"], Expected {"expr": [["let", ["x", ":", "int"], "=", {"expr": "x", "type": "int"}], {"expr": "x", "type": "int"}], "type": "int"}
, Got "variable x undeclared"

interpreter: Failed [["let", ["x", ":", "int"], "=", ["call", "y", 3]], ["let", ["y", ":", ["int", "->", "int"]], "=", ["fun*", [["y", ":", "int"]], ["x", "+", "y"]]], ["fun*", [["a", ":", ["int", "->", "int"]], ["b", ":", "int"]], ["call", "y", "x"]]], Expected {"expr": [["let", ["x", ":", "int"], "=", {"expr": ["call", {"expr": "y", "type": ["int", "->", "int"]}, {"expr": 3, "type": "int"}], "type": "int"}], ["let", ["y", ":", ["int", "->", "int"]], "=", {"expr": ["fun*", [["y", ":", "int"]], {"expr": ["call", {"expr": "+", "type": ["int", "int", "->", "int"]}, {"expr": "x", "type": "int"}, {"expr": "y", "type": "int"}], "type": "int"}], "type": ["int", "->", "int"]}], {"expr": ["fun*", [["a", ":", ["int", "->", "int"]], ["b", ":", "int"]], {"expr": ["call", {"expr": "y", "type": ["int", "->", "int"]}, {"expr": "x", "type": "int"}], "type": "int"}], "type": [["int", "->", "int"], "int", "->", "int"]}], "type": [["int", "->", "int"], "int", "->", "int"]}
, Got "variable y undeclared"

interpreter: Failed [["let", ["x", ":", ["int", "->", "int"]], "=", [["let", ["x", ":", "int"], "=", "x"], "x"]], "x"], Expected "matching type declarations and types expected in Decl"
, Got "variable x undeclared"

interpreter: Failed [["let", ["x", ":", ["int", "int", "->", "int"]], "=", "*"], ["let", ["y", ":", "int"], "=", 4], ["x", "*", "y"]], Expected "matching function and argument types expected"
, Got "variable * undeclared"

interpreter: Failed [["let", ["mult2", ":", ["int", "->", "int"]], "=", ["fun*", [["a", ":", "int"]], ["a", "*", 2]]],
["let", ["add3", ":", ["int", "->", "int"]], "=", ["fun*", [["b", ":", "int"]], ["b", "+", 3]]],
["let", ["callem", ":", [["int", "->", "int"], ["int", "->", "int"], "int", "int", "->", "int"]], "=",
                  ["fun*", [["fun1", ":", ["int", "->", "int"]], ["fun2", ":", ["int", "->", "int"]], ["x", ":", "int"], ["y", ":", "int"]],
                          [["call", "fun1", "x"], "+", ["call", "fun2", "y"]]]],

["call", "callem", "mult2", "add3", 2, 3]]
, Expected {"expr": [["let", ["mult2", ":", ["int", "->", "int"]], "=", {"expr": ["fun*", [["a", ":", "int"]], {"expr": ["call", {"expr": "*", "type": ["int", "int", "->", "int"]}, {"expr": "a", "type": "int"}, {"expr": 2, "type": "int"}], "type": "int"}], "type": ["int", "->", "int"]}], ["let", ["add3", ":", ["int", "->", "int"]], "=", {"expr": ["fun*", [["b", ":", "int"]], {"expr": ["call", {"expr": "+", "type": ["int", "int", "->", "int"]}, {"expr": "b", "type": "int"}, {"expr": 3, "type": "int"}], "type": "int"}], "type": ["int", "->", "int"]}], ["let", ["callem", ":", [["int", "->", "int"], ["int", "->", "int"], "int", "int", "->", "int"]], "=", {"expr": ["fun*", [["fun1", ":", ["int", "->", "int"]], ["fun2", ":", ["int", "->", "int"]], ["x", ":", "int"], ["y", ":", "int"]], {"expr": ["call", {"expr": "+", "type": ["int", "int", "->", "int"]}, {"expr": ["call", {"expr": "fun1", "type": ["int", "->", "int"]}, {"expr": "x", "type": "int"}], "type": "int"}, {"expr": ["call", {"expr": "fun2", "type": ["int", "->", "int"]}, {"expr": "y", "type": "int"}], "type": "int"}], "type": "int"}], "type": [["int", "->", "int"], ["int", "->", "int"], "int", "int", "->", "int"]}], {"expr": ["call", {"expr": "callem", "type": [["int", "->", "int"], ["int", "->", "int"], "int", "int", "->", "int"]}, {"expr": "mult2", "type": ["int", "->", "int"]}, {"expr": "add3", "type": ["int", "->", "int"]}, {"expr": 2, "type": "int"}, {"expr": 3, "type": "int"}], "type": "int"}], "type": "int"}
, Got "variable * undeclared"

interpreter: Failed ["if-0", 0, 111, "*"]
, Expected "same type expected for if branches"
, Got "variable * undeclared"

interpreter: Failed [["let",["x",":",["int","int","->","int"]],"=","+"],["let",["y",":",[["int","int","->","int"], ["int","int","->","int"],"->","int"]], "=", ["fun*",[["foo",":",["int","int","->","int"]],["bar",":",["int","int","->","int"]]],[["call","foo",1,2],"+",["call","bar",10,11]]]],["x","y","*"]], Expected {"expr":[["let",["x",":",["int","int","->","int"]],"=",{"expr":"+","type":["int","int","->","int"]}],["let",["y",":",[["int","int","->","int"],["int","int","->","int"],"->","int"]],"=",{"expr":["fun*",[["foo",":",["int","int","->","int"]],["bar",":",["int","int","->","int"]]],{"expr":["call",{"expr":"+","type":["int","int","->","int"]},{"expr":["call",{"expr":"foo","type":["int","int","->","int"]},{"expr":1,"type":"int"},{"expr":2,"type":"int"}],"type":"int"},{"expr":["call",{"expr":"bar","type":["int","int","->","int"]},{"expr":10,"type":"int"},{"expr":11,"type":"int"}],"type":"int"}],"type":"int"}],"type":[["int","int","->","int"],["int","int","->","int"],"->","int"]}],{"expr":["call",{"expr":"y","type":[["int","int","->","int"],["int","int","->","int"],"->","int"]},{"expr":"x","type":["int","int","->","int"]},{"expr":"*","type":["int","int","->","int"]}],"type":"int"}],"type":"int"}
, Got "variable * undeclared"

interpreter: Failed [["let", ["+", ":", "int"], "=", 8],  ["+", "*", "+"]], Expected {"expr" : [["let", ["+", ":", "int"], "=", {"expr" : 8, "type" : "int"}], {"expr" : ["call", {"expr" : "*", "type" : ["int", "int", "->", "int"]}, {"expr" : "+", "type" : "int" }, {"expr" : "+", "type" : "int" }], "type" : "int"}],"type" : "int"}
, Got "variable * undeclared"

interpreter: Failed [["let", ["fact", ":", ["int", "->", "int"]],
  "=", ["fun*", [["n", ":", "int"]],
        ["if-0", "n", 1, ["n", "*", ["call", "fact", ["n", "+", -1]]]]]],
 ["call", "fact", 255]]
, Expected {"expr":[["let",["fact",":",["int","->","int"]],"=",{"expr":["fun*",[["n",":","int"]],{"expr":["if-0",{"expr":"n","type":"int"},{"expr":1,"type":"int"},{"expr":["call",{"expr":"*","type":["int","int","->","int"]},{"expr":"n","type":"int"},{"expr":["call",{"expr":"fact","type":["int","->","int"]},{"expr":["call",{"expr":"+","type":["int","int","->","int"]},{"expr":"n","type":"int"},{"expr":-1,"type":"int"}],"type":"int"}],"type":"int"}],"type":"int"}],"type":"int"}],"type":["int","->","int"]}],{"expr":["call",{"expr":"fact","type":["int","->","int"]},{"expr":255,"type":"int"}],"type":"int"}],"type":"int"}
, Got "variable * undeclared"

interpreter: Failed [["let", ["f", ":", ["int", "int", "->", "int"]], "=", "*"],
 "notdecl"]
, Expected "variable notdecl undeclared"
, Got "variable * undeclared"

interpreter: Failed [["let", ["x", ":", "int"], "=", ["call", "y", 5]],
 ["let", ["y", ":", ["int", "->", "int"]], "=", ["fun*", [["z", ":", "int"]], "z"]],
 ["call", "+", "x", ["call", "y", 5]]]
, Expected {"expr":[["let",["x",":","int"],"=",{"expr":["call",{"expr":"y","type":["int","->","int"]},{"expr":5,"type":"int"}],"type":"int"}],["let",["y",":",["int","->","int"]],"=",{"expr":["fun*",[["z",":","int"]],{"expr":"z","type":"int"}],"type":["int","->","int"]}],{"expr":["call",{"expr":"+","type":["int","int","->","int"]},{"expr":"x","type":"int"},{"expr":["call",{"expr":"y","type":["int","->","int"]},{"expr":5,"type":"int"}],"type":"int"}],"type":"int"}],"type":"int"}
, Got "variable y undeclared"

interpreter: Failed [["let", ["f", ":", ["int", "->", "int"]], 
  "=", ["fun*", [["x", ":", "int"]], ["call", "g", ["fun*", [["y", ":", "int"]], "x"]]]],
 ["let", ["g", ":", [["int", "->", "int"], "->", "int"]],
  "=", ["fun*", [["g", ":", ["int", "->", "int"]]],
        ["call", "f", ["call", "g", 1]]]],
 [1, "f"]]
, Expected {"expr":[["let",["f",":",["int","->","int"]],"=",{"expr":["fun*",[["x",":","int"]],{"expr":["call",{"expr":"g","type":[["int","->","int"],"->","int"]},{"expr":["fun*",[["y",":","int"]],{"expr":"x","type":"int"}],"type":["int","->","int"]}],"type":"int"}],"type":["int","->","int"]}],["let",["g",":",[["int","->","int"],"->","int"]],"=",{"expr":["fun*",[["g",":",["int","->","int"]]],{"expr":["call",{"expr":"f","type":["int","->","int"]},{"expr":["call",{"expr":"g","type":["int","->","int"]},{"expr":1,"type":"int"}],"type":"int"}],"type":"int"}],"type":[["int","->","int"],"->","int"]}],{"expr":["call",{"expr":"f","type":["int","->","int"]},{"expr":1,"type":"int"}],"type":"int"}],"type":"int"}
, Got "variable g undeclared"

interpreter: Failed [
  ["let", ["x", ":", "int"], "=", "y"],
  ["let", ["y", ":", "int"], "=", 5],
  "x"
], Expected {"expr":[["let",["x",":","int"],"=",{"expr":"y","type":"int"}],["let",["y",":","int"],"=",{"expr":5,"type":"int"}],{"expr":"x","type":"int"}],"type":"int"}, Got "variable y undeclared"

interpreter: Failed [
  ["let", ["!", ":", ["int", "->", "int"]], "=",
    [
      "fun*",
      [["x", ":", "int"]],
      ["if-0", "x",
      1,
      ["call", "*", "x", ["call", "+", "x", -1]]]
    ]
  ],
  ["call", "!", 256]
], Expected {"expr":[["let",["!",":",["int","->","int"]],"=",{"expr":["fun*",[["x",":","int"]],{"expr":["if-0",{"expr":"x","type":"int"},{"expr":1,"type":"int"},{"expr":["call",{"expr":"*","type":["int","int","->","int"]},{"expr":"x","type":"int"},{"expr":["call",{"expr":"+","type":["int","int","->","int"]},{"expr":"x","type":"int"},{"expr":-1,"type":"int"}],"type":"int"}],"type":"int"}],"type":"int"}],"type":["int","->","int"]}],{"expr":["call",{"expr":"!","type":["int","->","int"]},{"expr":256,"type":"int"}],"type":"int"}],"type":"int"}, Got "variable * undeclared"
